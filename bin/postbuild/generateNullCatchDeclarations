#!/usr/bin/env node

const fs = require('fs');

const OUT_DIR = process.argv[2];

const ALPHABET = 'abcdefghijklmnopqrstuvwxyz';

const generateNullCatchFunctionDeclaration = n => {
  if (!Number.isSafeInteger(n) || n < 1) {
    throw new SyntaxError(`Invalid amount`);
  }

  if (n > 26) {
    throw new ReferenceError(`Amount exceeds alphabet capacity`);
  }

  const typeParams = Array(n).fill(0).map((_, i) => `T${i + 1}`).join(', ');
  const newFnParams = Array(n).fill(0).map((_, i) => `${ALPHABET[i]}: T${i + 1}`).join(', ');

  return `// This declaration was automatically generated
export declare function nullwrap<${typeParams}, R>(realFn: (${newFnParams}) => R, errorMatch?: ErrorMatch): (${newFnParams}) => R | null;`;
};

const generateNullCatchFunctionDeclarations = highest => {
  const generated = [];

  for (let n = 1; n <= highest; n++) {
    generated.push(generateNullCatchFunctionDeclaration(n));
  }

  return `import { ErrorMatch, errorMatches } from "./errorMatches";

${generated.join('\n\n')}

export declare function nullwrap<R>(realFn: (...args: any[]) => R, errorMatch?: ErrorMatch): (...args: any[]) => R | null;

export declare function nullwrap(realFn: Function, errorMatch?: ErrorMatch): Function;
`;
};

fs.writeFileSync(`${OUT_DIR}/error/nullCatch.d.ts`, generateNullCatchFunctionDeclarations(26));
